/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AttributeMappingMatch } from "./attributemappingmatch";
import { AttributeMappingSort } from "./attributemappingsort";
import { Expose, Type } from "class-transformer";

export class AttributeMappingSearchInclude extends SpeakeasyBase {
  /**
   * true: include the `attribute` in the response; <br> false: exclude `attribute` in the response
   */
  @SpeakeasyMetadata()
  @Expose({ name: "attribute" })
  attribute?: boolean;
}

export class AttributeMappingSearch extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "include" })
  @Type(() => AttributeMappingSearchInclude)
  include?: AttributeMappingSearchInclude;

  /**
   * Specification for matching attribute mapping.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "match" })
  @Type(() => AttributeMappingMatch)
  match?: AttributeMappingMatch;

  /**
   * Page number to be retrieved. <br> **Note**: <br> 1) Applicable only in a paginated response. <br> 2) Always paired with `size`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "page" })
  page: number;

  /**
   * Number of records per page <br> **Note**: <br> 1) Applicable only in a paginated response. <br> 2) Always paired with `page`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "size" })
  size: number;

  /**
   * Sorting preference
   */
  @SpeakeasyMetadata({ elemType: AttributeMappingSort })
  @Expose({ name: "sort" })
  @Type(() => AttributeMappingSort)
  sort?: AttributeMappingSort[];
}
