/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AttributeValidation } from "./attributevalidation";
import { FileResponse } from "./fileresponse";
import { StatusResponse } from "./statusresponse";
import { Expose, Transform, Type } from "class-transformer";

export class AttributeResponseLocales extends SpeakeasyBase {
  /**
   * Locale identifier
   */
  @SpeakeasyMetadata()
  @Expose({ name: "locale" })
  locale?: string;

  /**
   * Localized string value
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

/**
 * Indicates whether the attribute is for categories or items.
 */
export enum AttributeResponseTargetEnum {
  Node = "NODE",
  Item = "ITEM",
}

/**
 * Data type of the attribute
 */
export enum AttributeResponseTypeEnum {
  Text = "TEXT",
  Boolean = "BOOLEAN",
  Serial = "SERIAL",
  Decimal = "DECIMAL",
  Integer = "INTEGER",
  Datetime = "DATETIME",
}

export class AttributeResponse extends SpeakeasyBase {
  /**
   * ID that created the attribute
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createdBy" })
  createdBy?: string;

  /**
   * Time of attribute creation
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createdOn" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdOn?: Date;

  /**
   * Attribute description
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * Array of file's associated with an item
   */
  @SpeakeasyMetadata({ elemType: FileResponse })
  @Expose({ name: "files" })
  @Type(() => FileResponse)
  files?: FileResponse[];

  /**
   * Attribute format. Currently used only for the attribute type `DATETIME`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "format" })
  format?: string;

  /**
   * JavaScript expression to dynamically  compute the attribute's value. <br> **Note**: The type returned must match the attribute's type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "formula" })
  formula?: string;

  /**
   * Attribute ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  @SpeakeasyMetadata({ elemType: AttributeResponseLocales })
  @Expose({ name: "locales" })
  @Type(() => AttributeResponseLocales)
  locales?: AttributeResponseLocales[];

  /**
   * true: attribute can be localized <br> false: attribute cannot be localized
   */
  @SpeakeasyMetadata()
  @Expose({ name: "localizable" })
  localizable?: boolean;

  /**
   * Attribute mapping. <br> **Note**: Most attributes will not have a mapping, resulting in null value.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mapping" })
  mapping?: string;

  /**
   * User ID that last modified the attribute
   */
  @SpeakeasyMetadata()
  @Expose({ name: "modifiedBy" })
  modifiedBy?: string;

  /**
   * Time when the attribute was last modified
   */
  @SpeakeasyMetadata()
  @Expose({ name: "modifiedOn" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  modifiedOn?: Date;

  /**
   * Attribute name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Conditionally required to indicate the starting value of `SERIAL` attribute type. When enabled, the subsequent attribute values increment by 1.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "serialStart" })
  serialStart?: number;

  /**
   * For 'attribute modify request', the `PIM` statuses (if applicable). For 'attribute search request', the statuses defined by the `include.status` request parameter.
   */
  @SpeakeasyMetadata({ elemType: StatusResponse })
  @Expose({ name: "statuses" })
  @Type(() => StatusResponse)
  statuses?: StatusResponse[];

  /**
   * Indicates whether the attribute is for categories or items.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "target" })
  target?: AttributeResponseTargetEnum;

  /**
   * Data type of the attribute
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: AttributeResponseTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "validation" })
  @Type(() => AttributeValidation)
  validation?: AttributeValidation;
}
